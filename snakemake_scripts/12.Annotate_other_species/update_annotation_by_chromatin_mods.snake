import pandas as pd
from snakemake.utils import validate
import glob 
import os 

##### load config and sample sheets #####
#configfile: "glycine_max_config.yaml"

#Load reference File
ref = config['reference']
gene_bed_file = config['genes']
ncRNA_bed_File = config['ncRNAs']
lncRNA_bed_File = config['lncRNAs']

#L3oad Samples from the CSV file - index the important ones
samples = pd.read_csv(config["samples"], sep=' ')#.set_index(["tissue", "replicate", "chip"], drop=False)

base_RNA_name = config["RNA_base_name"]

rna_files = samples[samples['chip'] == base_RNA_name].set_index(["tissue", "replicate", "chip"], drop=False)
samples_clean = samples[samples['chip'] != base_RNA_name].set_index(["tissue", "replicate", "chip"], drop=False)
samples_clean.index = samples_clean.index.set_levels([i.astype(str) for i in samples_clean.index.levels])  # enforce str in index

# which sample_type is used as control for calling peaks: e.g. Input, IgG...
chip_file_types = list(samples_clean.chip.unique())
chip_file_types.remove('Input')
input_file_type = ["Input"]


gather_broad_peaks = config['broad'].split(' ') 
gather_narrow_peaks = config['narrow'].split(' ')
all_peak_types = config['all'].split(' ')


two_classes = ["broad", "narrow"]

#seperates these guys for later processing. Sorts them by the type of histone
#mods they are b/c they'll use different algorithms
narrow_peaks = samples_clean[samples_clean['chip'].isin(gather_narrow_peaks)]
broad_peaks = samples_clean[samples_clean['chip'].isin(gather_broad_peaks)]

RNA_file = list(rna_files.chip.unique())

possible_output_groups = ["novel_genes", "merged_genes", "minor_extension_genes","major_extension_genes",
"hyper_large_genes"] #"un_altered_genes"]

#Unique tissue types present. This is useful as downbelow on expands we dont' 
#expand on everything a TON
#samples_clean

uniq_tis = samples_clean['tissue'].unique()

#Due to the RNA BAM files being too big, I have to split them up by
#chromosomes. Since I don't want this hard coded into the script, these files
#generate all the chromosomes I need
command="grep '>' %s" % str(ref) + ".fa"
command_output=list(os.popen(command))
chromosomes = [x.strip().replace(">","") for x in command_output ]


grab_base_name = config['base_name']






rule all:
    input:
        "00.data/reference/bowtie_idx.1.bt2",
        expand("02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.bam", 
                base_name = grab_base_name,
                tissue = samples_clean['tissue'], replicate = samples_clean['replicate'], 
                chip = samples_clean['chip']),

        expand("00.data/{ref_b}_mappability.bed",
                ref_b = config['reference_base']),
        
        
        
        
        
        #This is a fancy little call that basically only populates the outputs
        #that we want. So calling peaks for NON input files
        expand("03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_broad.bed",
                base_name = grab_base_name,
                tissue = broad_peaks['tissue'], 
                replicate = broad_peaks['replicate'], 
                chip = gather_broad_peaks),
        expand("03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_narrow.bed",
                base_name = grab_base_name,
                tissue = narrow_peaks['tissue'], 
                replicate = narrow_peaks['replicate'], 
                chip = gather_narrow_peaks),

        expand("04.intersecting_peaks_same_mod/{base_name}_tis_{tissue}_{chip}_{group}_merged.bed",
                base_name = grab_base_name,
                tissue = broad_peaks['tissue'], 
                chip = gather_broad_peaks,
                group = "broad"),
        expand("04.intersecting_peaks_same_mod/{base_name}_tis_{tissue}_{chip}_{group}_merged.bed",
                base_name = grab_base_name,
                tissue = narrow_peaks['tissue'], 
                chip = gather_narrow_peaks,
                group = "narrow"),
        expand("05.RNA_alignment/{RNA}_tis_{tissue}_Aligned.sortedByCoord.out.bam",
                RNA = rna_files['chip'], 
                tissue = rna_files["tissue"]),
        expand("06.split_chromosomes/{RNA}_tis_{tissue}_split_chrom_{chromosome}.bam",
                RNA = rna_files['chip'], 
                tissue = rna_files["tissue"],
                chromosome = chromosomes),
        expand("06.split_chromosomes/{base_name}_tis_{tissue}_chip_{chip}.bw",
                base_name = grab_base_name,
                tissue = broad_peaks['tissue'], 
                chip = gather_broad_peaks[0]),
        expand("06.split_chromosomes/{base_name}_tis_{tissue}_{chip}_{group}_merged_chrom_{chromosome}.bed",
                base_name = grab_base_name,
                tissue = broad_peaks['tissue'],    
                chip = gather_broad_peaks,         
                group = "broad",                  
                chromosome = chromosomes),
        expand("06.split_chromosomes/{base_name}_tis_{tissue}_{chip}_{group}_merged_chrom_{chromosome}.bed",
                base_name = grab_base_name,
                tissue = broad_peaks['tissue'],    
                chip = gather_narrow_peaks,         
                group = "narrow",                  
                chromosome = chromosomes),
        expand("08.updated_annotation_output/{base_name}_tis_{tissue}_all_chrom_updated_annotation.bed",
                base_name = grab_base_name,
                tissue = uniq_tis),
        expand("08.updated_annotation_output/merged/{base_name}_tis_{tissue}_annotation_{split_file_name}.bed",
                base_name = grab_base_name,
                tissue = uniq_tis, split_file_name = possible_output_groups),

        #expand("08.updated_annotation_output/merged/{split_file_name}_ven_diagram.png", 
        #        split_file_name = possible_output_groups),
        #expand("09.diff_tissue_merged_file_type/{split_file_name}.bed",
        #        split_file_name = possible_output_groups),
        #expand("10.merged_histone_mods/{base_name}_tis_{tissue}_H3K36me3_H3K4me1_intersection.bed",
        #        base_name = grab_base_name,
        #        tissue = broad_peaks['tissue'])
        ##Generate Annotations Overlapping Merged values
        #expand("11.Annotated_features_merged_intersect/lncRNAs_{tissue}_H3K36me3_H3K4me1_intersection.bed",
        #        tissue = broad_peaks['tissue'], BED = gene_bed_file),
        #expand("11.Annotated_features_merged_intersect/genes_{tissue}_H3K36me3_H3K4me1_intersection.bed",
        #        tissue = broad_peaks['tissue'],  BED = lncRNA_bed_File ) 

rule generate_reference_index:
    input:
        expand("{ref}.fa", ref = ref)
    params:
        output_name = "00.data/reference/bowtie_idx"
    output:
        "00.data/reference/bowtie_idx.1.bt2"
    threads: 6
    shell:
        "bowtie2-build {input} {params.output_name} -p {threads}"

def get_chip_mods(wildcards):
    final_list = samples_clean.loc[(wildcards.tissue, wildcards.replicate, wildcards.chip), ["file"]].dropna()
    #new_final_list = final_list.append(pd.Series([wildcards.base_name])
    #print(new_final_list)
    #new_final = final_list.concat([pd.Series([wildcards.base_name]), final_list])

    #print(new_final)
    return final_list

rule trim_reads:
    input:
        get_chip_mods
    params:
        "00.data/trimmed_chip/log_files/{base_name}_tis_{tissue}_{chip}_{replicate}.log"
    output:
        "00.data/trimmed_chip/{base_name}_tis_{tissue}_{chip}_{replicate}_trimmed.fq"
    threads: 5
    message: """Trimming"""
    shell:
       """
       java -jar /usr/local/apps/eb/Trimmomatic/0.36-Java-1.8.0_144/trimmomatic-0.36.jar \
       SE -threads {threads} -phred33 {input} {output} \
       ILLUMINACLIP:/scratch/jpm73279/04.lncRNA/02.Analysis/23.generate_all_metaplots/00.data/adapter.fa:2:30:10 \
       LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36
       """

rule align_regions_to_genome:
    input:
        reads = "00.data/trimmed_chip/{base_name}_tis_{tissue}_{chip}_{replicate}_trimmed.fq",
        ref = "00.data/reference/bowtie_idx.1.bt2"
    priority: 80
    output:
        chip_mod="01.bowtie_align/{base_name}_tis_{tissue}_{replicate}_{chip}_bowtie2_algn.sam"
    threads: 10 
    shell:
        """
        bowtie2 -x 00.data/reference/bowtie_idx -U {input.reads} -S {output.chip_mod} -p {threads} ;
        """

rule unique_reads_to_BAM:
    input:
        chip_mod="01.bowtie_align/{base_name}_tis_{tissue}_{replicate}_{chip}_bowtie2_algn.sam"
    priority: 60
    output:
        chip_mod_unique_sam = "02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.sam",
        chip_mod_unique_bam = "02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.bam"
    threads: 10 
    shell: """
        grep -E "@|NM:" {input.chip_mod} | grep -v "XS:" > {output.chip_mod_unique_sam} ;
        samtools sort {output.chip_mod_unique_sam} > {output.chip_mod_unique_bam} -@ {threads} ; 
        samtools index {output.chip_mod_unique_bam}
        """ 

## I can't really belive this worked
def get_input_peak_call(wildcards):
    #i=glob_wildcards(os.path.join(checkpoint_output, "{i}.txt")).i)

    c = (wildcards.base_name + "_tis_" + wildcards.tissue + "_" + \
        wildcards.replicate + "_" + "input_unique_bowtie2_algn.bam")
    q = os.path.join("02.unique_align", c)
    z = glob.glob(q)
    print(z)
    return z


def get_chip_peak_call(wildcards):
    c = (wildcards.base_name + "_tis_" + wildcards.tissue + "_" + \
               wildcards.replicate + "_" + wildcards.chip + "_" + \
               "unique_bowtie2_algn.bam")
    q = os.path.join("02.unique_align", c)
    z = glob.glob(os.path.join("02.unique_align", c))
    print(z)
    return z

rule take_reference_index:
    input:
        input_file = expand("00.data/reference/{ref_b}.fa", ref_b = config['reference_base'])
    output:
        fai_file = "00.data/reference/{ref_b}.fa.fai"
    shell:"""
    samtools faidx -i {input}
    """


rule generate_mappability_index:
    input:
        input_file = expand("00.data/reference/{ref_b}.fa", ref_b = config['reference_base'])
    conda:
        "envs/gen_map.yml"
    output:
        index_dir = directory("00.data/mappability_index")
    shell:"""
    genmap index -F {input.input_file} -I {output.index_dir}
    """


rule get_mappable_genome_sequence:
    input:
        input_file = expand("00.data/reference/{ref_b}.fa", ref_b = config['reference_base']),
        index_dir = directory("00.data/mappability_index")
    conda:
        "envs/gen_map.yml"
    params:
        output_dir = "00.data/{ref_b}_mappability"
    output:
        "00.data/{ref_b}_mappability.bed"
    shell:"""
    genmap map -K 75 -E 0 -I {input.index_dir} -O {params.output_dir} -t -w -b
    """


#Generate bigwig files from merged ChIP-seq replicates
#rule split_broad_peak_bams:
#    input:
#        chip_merged_rep = expand("02.unique_align/{{base_name}}_tis_{{tissue}}_{replicate}_{{chip}}_unique_bowtie2_algn.bam",
#                #base_name = grab_base_name,
#                #tissue = broad_peaks['tissue'], 
#            replicate = broad_peaks['replicate'])
#            #chip = gather_broad_peaks[0])
#    params:
#        "{chromosome}"
#    output:
#        chip_chrom_split = "02.unique_align/split_by_chrom/{base_name}_tis_{tissue}_chip_{chip}_chrom_{chromosome}.bam"
#    threads: 5
#    shell:"""
#    samtools view -@ {threads} -b -h {input.chip_merged_rep} {params} > {output.chip_chrom_split}
#    samtools index {output.chip_chrom_split}
#    """

rule generate_bigwig_file:
    input:
        #chip_merged_rep = expand("02.unique_align/{{base_name}}_tis_{{tissue}}_{replicate}_{{chip}}_unique_bowtie2_algn.bam",
        #    #base_name = grab_base_name,
        #    #tissue = broad_peaks['tissue'], 
        #    replicate = broad_peaks['replicate'])
        #    #chip = gather_broad_peaks[0])
        lambda wildcards: ["02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.bam".format(
            base_name = wildcards.base_name,
            tissue = wildcards.tissue, 
            replicate = "rep1",
            chip = "H3K36me3")],
    conda:
        "envs/deepTools.yml"
    output:
        "06.split_chromosomes/{base_name}_tis_{tissue}_chip_{chip}.bw"
    threads: 2
    shell:"""
    samtools index {input}
    bamCoverage -b {input} -o {output} -p {threads} --binSize 1 --normalizeUsing CPM
    """




#Note that BCP caller biass itself towards only calling `broad` peaks, so as of
#12/17/2019 I modified this step to call both broad and narrow peaks on our
#broad marks and merge them
rule run_bcp_peak_caller_broad:
    input:
        chip_input =  lambda wildcards: ["02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.bam".format(
            base_name = wildcards.base_name,
            tissue = wildcards.tissue, 
            replicate = wildcards.replicate,
            chip = "Input")],
        chip_mod = lambda wildcards: ["02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.bam".format(
            base_name = wildcards.base_name,
            tissue = wildcards.tissue, 
            replicate = wildcards.replicate,
            chip = wildcards.chip)],
        samtools_index = expand("00.data/reference/{ref_b}.fa.fai", ref_b = config['reference_base'])
    params:
        genome_mappable = expand("00.data/{ref_b}_mappability.bed", ref_b = config['reference_base']),
        genome_size_file = "03.called_peaks/genome_size.txt",
        #broad_region_base = "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_broad",
        #narrow_region_base = "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_narrow",
        broad_region_base_intermed = "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_broad.intermediate.bed",
        #narrow_region_base_intermed = "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_narrow.intermediate.bed"
    output:
        "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_broad.bed"

    conda:
        "envs/EPIC2.yml"
    shell:"""
    awk 'BEGIN {{FS="\t" ; OFS="\t"}}; $2 > 10000 {{print $1,$2}}' {input.samtools_index}> {params.genome_size_file}

    epic2 --treatment {input.chip_mod} \
    --control {input.chip_input} \
    --chromsizes {params.genome_size_file} \
    --false-discovery-rate-cutoff .1 --keep-duplicates \
    --output {params.broad_region_base_intermed}

    awk 'BEGIN {{FS="\t" ; OFS="\t"}}; {{print $1,$2,$3,$4}}' {params.broad_region_base_intermed} > {output}
    """


#12/17/2019 I modified this step to call both broad and narrow peaks on our
#broad marks and merge them
#rule run_bcp_peak_caller_broad:
#    input:
#        chip_input =  lambda wildcards: ["02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.bam".format(
#            base_name = wildcards.base_name,
#            tissue = wildcards.tissue, 
#            replicate = wildcards.replicate,
#            chip = "Input")],
#        chip_mod = lambda wildcards: ["02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.bam".format(
#            base_name = wildcards.base_name,
#            tissue = wildcards.tissue, 
#            replicate = wildcards.replicate,
#            chip = wildcards.chip)]
#    params:
#        broad_region_base = "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_broad",
#        narrow_region_base = "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_narrow",
#        broad_region_base_intermed = "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_broad.intermediate.bed",
#        narrow_region_base_intermed = "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_narrow.intermediate.bed"
#    output:
#        "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_broad.bed"
#    conda:
#        "envs/MACS_2.yml"    
#    shell:"""
#    macs2 callpeak -t {input.chip_mod} -c {input.chip_input} -f BAM -g 1.0e9 --broad -n {params.broad_region_base} --broad-cutoff 0.1 -q .05
#    macs2 callpeak -t {input.chip_mod} -c {input.chip_input} -f BAM -g 1.0e9 -q .01 -n {params.narrow_region_base}
#
#
#    awk 'BEGIN {{FS="\t" ; OFS="\t"}}; {{print $1,$2,$3,$4}}' {params.broad_region_base}_peaks.broadPeak > {params.broad_region_base_intermed}
#    awk 'BEGIN {{FS="\t" ; OFS="\t"}}; {{print $1,$2,$3,$4}}' {params.narrow_region_base}_peaks.narrowPeak > {params.narrow_region_base_intermed}
#
#    cat {params.narrow_region_base_intermed} {params.broad_region_base_intermed}  | bedtools sort -i - | bedtools merge -i - -d 1200 > {output}
#    """
    #shell:
        #"""
        #peakranger bcp \
        #--format bam \
        #--verbose \
        #--pval .01 \
        #--data {input.chip_mod} \
        #--control {input.chip_input} \
        #--output {params.broad_region_base}

        #peakranger ranger \
        #--format bam \
        #--ext_length 400 \
        #--verbose \
        #--pval .01 \
        #--data {input.chip_mod} \
        #--control {input.chip_input} \
        #--output {params.narrow_region_base}

        #cat {params.narrow_region_base}_region.bed {params.broad_region_base}_region.bed | \
        #bedtools sort -i - | bedtools merge -i - -d 100 -c 3,4,5 -o distinct,distinct,distinct -delim "|"> {output}
        #"""
   

rule run_bcp_peak_caller_narrow:
    input:
        chip_input = lambda wildcards: ["02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.bam".format(
            base_name = wildcards.base_name,
            tissue = wildcards.tissue, 
            replicate = wildcards.replicate,
            chip = "Input")],
        chip_mod2 = lambda wildcards: ["02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.bam".format(
            base_name = wildcards.base_name,
            tissue = wildcards.tissue, 
            replicate = wildcards.replicate,
            chip = wildcards.chip)]
    params:
        genome_mappable = expand("00.data/{ref_b}_mappability.bed", ref_b = config['reference_base']),
        narrow_region_base = "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_narrow",
        narrow_region_base_intermed = "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_narrow.intermediate.bed"
    output:
        "03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_narrow.bed"
    conda:
        "envs/MACS_2.yml"
    shell:"""
        
        genome_size_catch=$( awk '$5 == 1 {{sum += $5}} END {{print sum}}' {params.genome_mappable} )
        echo ${{genome_size_catch}}

        macs2 callpeak -t {input.chip_mod2} -c {input.chip_input} -f BAM --nomodel --extsize 147 -p .001 -n {params.narrow_region_base}
    
        awk 'BEGIN {{FS="\t" ; OFS="\t"}}; {{print $1,$2,$3,$4}}' {params.narrow_region_base}_peaks.narrowPeak > {params.narrow_region_base_intermed}
        bedtools merge -i {params.narrow_region_base_intermed} -d 300 > {output}
        """
    #shell:
        #"""
        #peakranger ranger \
        #--format bam \
        #--ext_length 400 \
        #--verbose \
        #--pval .001 \
        #--data {input.chip_mod2} \
        #--control {input.chip_input} \
        #--output {params}
        #"""



rule quick_filter_broad:
    #Bullshit thing where bcp sometimes messes up
    input:
        expand("03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_broad.bed",
                base_name = grab_base_name,
                tissue = broad_peaks['tissue'], 
                replicate = broad_peaks['replicate'], 
                chip = gather_broad_peaks)
    params:
        "04.intersecting_peaks_same_mod/{base_name}_tis_{tissue}_{chip}_broad_merged.intermed.bed"
    output:
        "04.intersecting_peaks_same_mod/{base_name}_tis_{tissue}_{chip}_broad_merged.bed"
    shell: """
    awk -F "\\t" "{{ if(\$3 >= \$2) {{ print }}}}" {input} > {params}

    bedtools sort -i {params} | bedtools merge -d 25 -i - | bedtools sort -i - > {output} 
    """

rule quick_filter_narrow:
    #Bullshit thing where bcp sometimes messes up
    input:
        expand("03.called_peaks/{base_name}_tis_{tissue}_rep_{replicate}_mod_{chip}_peaks_narrow.bed",
                base_name = grab_base_name,
                tissue = broad_peaks['tissue'], 
                replicate = broad_peaks['replicate'], 
                chip = gather_narrow_peaks)
    params:
        "04.intersecting_peaks_same_mod/{base_name}_tis_{tissue}_{chip}_narrow_merged.intermed.bed"
    output:
        "04.intersecting_peaks_same_mod/{base_name}_tis_{tissue}_{chip}_narrow_merged.bed"
    shell: """
    awk -F "\\t" "{{ if(\$3 >= \$2) {{ print }}}}" {input} > {params}

    bedtools sort -i {params} | bedtools merge -d 25 -i - | bedtools sort -i - > {output} 
    """


#rule take_intersecting_peaks:
#    input:
#        replicate1 = "03.called_peaks/{base_name}_tis_{tissue}_rep1_{chip}_peaks_{group}_region.filtered.bed",
#        replicate2 = "03.called_peaks/{base_name}_tis_{tissue}_rep2_{chip}_peaks_{group}_region.filtered.bed"
#    params:
#        ven_title = "{tissue}_{chip}",
#        ven_out = "04.intersecting_peaks_same_mod/{base_name}_tis_{tissue}_{chip}_{group}_intersection.png"
#    output:
#        "04.intersecting_peaks_same_mod/{base_name}_tis_{tissue}_{chip}_{group}_merged.bed"
#    shell:"""
#    cat {input.replicate1} {input.replicate2} | bedtools sort -i - | bedtools \
#    merge -d 25 -c 4,5 -o collapse -i - | bedtools sort -i - > {output} ;
#
#    python /scratch/jpm73280/04.lncRNA/01.scripts/generate_ven_diagrams.py -bed {input.replicate1} {input.replicate2}  \
#    -header_name rep1 rep2 -title {params.ven_title} -o {params.ven_out} ;
#    """

rule trim_RNA_reads:
    input:
        "00.data/rna/raw/{RNA}_tis_{tissue}_all.fastq"
    params:
       "00.data/raw_reads/log_files/{RNA}_tis_{tissue}.log"
    output:
        "00.data/rna/trimmed/{RNA}_tis_{tissue}_all.fastq"
    threads: 5
    message: """Trimming"""
    shell:"""
    java -jar /usr/local/apps/eb/Trimmomatic/0.36-Java-1.8.0_144/trimmomatic-0.36.jar \
    SE -threads {threads} -phred33 {input} {output} \
    ILLUMINACLIP:/scratch/jpm73279/04.lncRNA/02.Analysis/23.generate_all_metaplots/00.data/adapter.fa:2:30:10 \
    LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36
    """

rule generate_star_index:
    input:
        expand("{ref}.fa", ref = ref)
    output:
        directory("00.data/reference/{reference}_index")
    threads:
        10
    shell:"""
    mkdir {output}

    STAR --runMode genomeGenerate \
    --genomeDir {output} \
    --genomeFastaFiles {input} \
    --runThreadN {threads} ;
    """

rule align_RNA_reads_to_genomes:
    input:
        index_dir=expand("00.data/reference/{reference}_index", reference = ref),
        fq_samp = "00.data/rna/trimmed/{RNA}_tis_{tissue}_all.fastq"
    threads: 
        10
    params:
        "05.RNA_alignment/{RNA}_tis_{tissue}_"
    output:
        "05.RNA_alignment/{RNA}_tis_{tissue}_Aligned.sortedByCoord.out.bam"
    shell:"""
        STAR --runThreadN {threads} \
        --genomeDir {input.index_dir} \
        --outSAMstrandField intronMotif \
        --readFilesIn {input.fq_samp} \
        --outSAMmapqUnique 255 \
        --alignIntronMax 50000 \
        --outSAMtype SAM \
        --outFileNamePrefix {params} ; 

        samtools view -b -h {params}Aligned.out.sam | samtools sort - > {params}Aligned.sortedByCoord.out.bam
    """

rule index_BAM_file:
    input:
        "05.RNA_alignment/{RNA}_tis_{tissue}_Aligned.sortedByCoord.out.bam"
    output:
        "05.RNA_alignment/{RNA}_tis_{tissue}_Aligned.sortedByCoord.out.bam.bai"
    shell:
        "samtools index {input}"

rule split_BAM_file:
    input:
        BAM_file = "05.RNA_alignment/{RNA}_tis_{tissue}_Aligned.sortedByCoord.out.bam",
        BAM_index = "05.RNA_alignment/{RNA}_tis_{tissue}_Aligned.sortedByCoord.out.bam.bai"
    params:
        "{chromosome}"
    output:
        "06.split_chromosomes/{RNA}_tis_{tissue}_split_chrom_{chromosome}.bam"
    threads:
        1
    shell:"""
    samtools view -@ {threads} -bh {input.BAM_file} {params} > {output}
    """

rule index_split_BAM_file:
    input:
        "06.split_chromosomes/{RNA}_tis_{tissue}_split_chrom_{chromosome}.bam"
    output:
        "06.split_chromosomes/{RNA}_tis_{tissue}_split_chrom_{chromosome}.bam.bai"
    shell:
        "samtools index {input}"


rule split_BED_file:
    input:
        "04.intersecting_peaks_same_mod/{base_name}_tis_{tissue}_{chip}_{group}_merged.bed"
    params:
        "{chromosome}"
    output:
        "06.split_chromosomes/{base_name}_tis_{tissue}_{chip}_{group}_merged_chrom_{chromosome}.bed"
    shell:"""
    bedextract {params} {input} > {output}
    """

rule generate_updated_annotation:
    input:
        broad = expand("06.split_chromosomes/{{base_name}}_tis_{{tissue}}_{chip}_{group}_merged_chrom_{{chromosome}}.bed".split(), 
            chip = gather_broad_peaks, group = "broad"),
        H3K36me3_bw = expand("06.split_chromosomes/{{base_name}}_tis_{{tissue}}_chip_{chip}.bw", chip = gather_broad_peaks[0]),
        narrow_peaks = expand("06.split_chromosomes/{{base_name}}_tis_{{tissue}}_{chip}_{group}_merged_chrom_{{chromosome}}.bed".split(), 
            group = "narrow", chip = gather_narrow_peaks),
        rna_file = expand("06.split_chromosomes/{RNA}_tis_{{tissue}}_split_chrom_{{chromosome}}.bam", RNA = base_RNA_name),
        gene_annotation = gene_bed_file,
        lncRNA_annotation = ncRNA_bed_File
    conda:
        "envs/pydev_1.yml"
    output:
        "07.updated_annotation_output/{base_name}_tis_{tissue}_chr_{chromosome}_updated_annotation.bed"
    shell:"""
        python scripts/Update_annotation.py -broad {input.broad} \
        -narrow {input.narrow_peaks} -annotation {input.gene_annotation} \
        -bw {input.H3K36me3_bw} \
        -RNA {input.rna_file} -lncRNA {input.gene_annotation} -o {output}
        """

#Aggegate aggregated fasta files
def gather_split_chrom_files(wildcards):
    files = expand("07.updated_annotation_output/{base_name}_tis_{tissue}_chr_{chromosome}_updated_annotation.bed",
            base_name = grab_base_name, tissue = uniq_tis, chromosome = chromosomes)
    return(files)

rule gather_chromosomes:
    input:
        gather_split_chrom_files
    params:
        "08.updated_annotation_output/intermed.bed"
    output:
        "08.updated_annotation_output/{base_name}_tis_{tissue}_all_chrom_updated_annotation.bed"
    shell:"""
    #for i in {input} ; do 
    #    echo ${{i}} >> {params}
    #done 

    cat {input} | bedtools sort -i - > {output}
    """

#Check out zip function usage for expand here 
#https://stackoverflow.com/questions/56975504/preventing-input-function-from-generating-files-not-present-in-sample-file
rule seperate_annotation_files:
    input:
        "08.updated_annotation_output/{base_name}_tis_{tissue}_all_chrom_updated_annotation.bed"
    conda:
        "envs/pydev_1.yml"
    params:
        gene_base_name = config['gene_base'],
        output_base_name = "08.updated_annotation_output/split/{base_name}_tis_{tissue}_annotation"
    output:
        "08.updated_annotation_output/split/{base_name}_tis_{tissue}_annotation_{split_file_name}.bed"
    shell:"""
        python scripts/seperate_into_groups.py {input} {params.gene_base_name} {params.output_base_name}
        """


#Issue where similar annotations are sometimes nested, so need to merge them
#before we take intersection


#Note the awk command is becase bedtool merge does a stupid thing when using
#strand command where it's output as the 4th column. This is redundent and
#reuins the file format
rule merge_annotation_updates:
    input:
        "08.updated_annotation_output/split/{base_name}_tis_{tissue}_annotation_{split_file_name}.bed"
    params:
        "08.updated_annotation_output/merged/{base_name}_tis_{tissue}_annotation_{split_file_name}.intemed.bed"
    output:
        "08.updated_annotation_output/merged/{base_name}_tis_{tissue}_annotation_{split_file_name}.bed"
    shell:"""
        bedtools sort -i {input} | bedtools merge -s -d 10 -c 4,5,6 -o distinct,mean,distinct -delim "|" -i - > {params}
        
        cat {params} > {output}

    """
    
def gather_different_tissues_same_file(wildcards):
    same_file = expand("08.updated_annotation_output/merged/{base_name}_tis_{tissue}_annotation_{{split_file_name}}.bed", 
            base_name = grab_base_name,
            tissue = uniq_tis)
    return(same_file)


##Note I've been having issues loading pybedtools here for some odd reason.
##Work around at the moment has been to use ML pybedtools which probably isn't a
##great solution
#rule generate_ven_diagams:
#    input:
#        gather_different_tissues_same_file
#    conda:
#        "envs/pydev_1.yml"
#    params:
#        names = ' '.join(uniq_tis),
#        R_script_name = "{split_file_name}_Rscript",
#        file_name = "{split_file_name}_ven_diagram",
#        output_dir = "08.updated_annotation_output/merged/"
#    output:
#        "08.updated_annotation_output/merged/{split_file_name}_ven_diagram.png"
#    shell:"""
#        python3 scripts/generate_ven_diagram_script.py -beds {input} -names {params.names} -script_name {params.R_script_name} -dir {params.output_dir} -o {params.file_name} 
#    """

rule merge_file_types:
    input:
        gather_different_tissues_same_file
    params:
        "09.diff_tissue_merged_file_type/{split_file_name}.intemed.bed"
    output:
        "09.diff_tissue_merged_file_type/{split_file_name}.bed"
    shell:"""
    cat {input} | bedtools sort -i - | bedtools merge -s -d 10 -c 4,5,6 -o \
    distinct,mean,distinct -delim "|" -i - > {params}

    cat {params} > {output}

    rm {params}
    """

def get_mod1(wildcards):
    z = glob.glob(os.path.join("04.intersecting_peaks_same_mod/", \
            (wildcards.base_name + "_tis_" + wildcards.tissue \
                + "_" + gather_broad_peaks[0] + \
            "_broad_merged.bed")))

    print(z)
    return z

def get_mod2(wildcards):
    z = glob.glob(os.path.join("04.intersecting_peaks_same_mod/", \
        (wildcards.base_name + "_tis_" +wildcards.tissue + \
            "_" + gather_broad_peaks[1] + "_broad_merged.bed")))
    print(z)
    return z




#    base_name = wildcards.base_name,
#    tissue = wildcards.tissue, 
#    replicate = wildcards.replicate,
#    chip = "Input")],
#chip_mod = lambda wildcards: ["02.unique_align/{base_name}_tis_{tissue}_{replicate}_{chip}_unique_bowtie2_algn.bam".format(
#    base_name = wildcards.base_name,
#    tissue = wildcards.tissue, 
#    replicate = wildcards.replicate,
#    chip = wildcards.chip)]


#Take the intersecting peaks of different mods
rule take_intersecting_peaks_diff_mods:
    input:
        H3K36me3 = get_mod1,
        H3K4me1 = get_mod2
    params:
        ven_title = "{tissue}_H3K36me3_H3K4me1",
        ven_out = "10.merged_histone_mods/{base_name}_tis_{tissue}_H3K4me1_H3K36me3_intersection.png"
    output:
        "10.merged_histone_mods/{base_name}_tis_{tissue}_H3K36me3_H3K4me1_intersection.bed"
    shell:"""

    bedtools intersect -a {input.H3K36me3} -b {input.H3K4me1} -wa -wb > {output} ;
    
    python3 /scratch/jpm73279/04.lncRNA/01.scripts/generate_ven_diagrams.py -bed {input.H3K4me1} {input.H3K36me3} \
    -header_name H3K4me1 H3K36me3 -title {params.ven_title} -o {params.ven_out} ;
    """

#Great Example on how to reference the input to 
rule intersect_diff_mod_peaks_with_beds_genes:
    input:
        BED = config['genes'],
        peaks = "10.merged_histone_mods/{base_name}_tis_{tissue}_H3K36me3_H3K4me1_intersection.bed"
    output:
        "11.Annotated_features_merged_intersect/genes_{tissue}_H3K36me3_H3K4me1_intersection.bed"
    shell:
        "bedtools intersect -a {input.BED} -b {input.peaks} -wa > {output}"

#Great Example on how to reference the input to 
rule intersect_diff_mod_peaks_with_beds_lncRNAs:
    input:
        BED = config['lncRNAs'],
        peaks = "10.merged_histone_mods/{base_name}_tis_{tissue}_H3K36me3_H3K4me1_intersection.bed"
    output:
        "11.Annotated_features_merged_intersect/lncRNAs_{tissue}_H3K36me3_H3K4me1_intersection.bed"
    shell:"""
    grep "ncRNA" {input.BED} > intermediate.lincRNAs.gff ; 
    bedtools intersect -a intermediate.lincRNAs.gff -b {input.peaks} -wa > {output}
    rm intermediate.lincRNAs.gff
    """



